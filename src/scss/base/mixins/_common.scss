@mixin aspect-ratio($width: 1, $height: $width, $pseudo: true) {
  @if $pseudo {
    &::after {
      content: '';
      display: block;
      padding-top: 1 / ($width / $height) * 100%;
    }
  }
  @else {
    display: block;
    padding-top: 1 / ($width / $height) * 100%;
  }
}

@mixin true-vh($property, $value) {
  #{$property}: #{strip-unit($value)}vh;
  #{$property}: calc(var(--vh, 1vh) * #{strip-unit($value)});
}

@mixin size($size) {
  width: $size;
  height: $size;
}

@mixin round($size) {
  @include size($size);
  border-radius: 50%;
}


@mixin clickable() {
  cursor: pointer;
  user-select: none;
}


@mixin scrollable() {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}


@mixin decor() {
  pointer-events: none;
  user-select: none;
}


@mixin editable-text() {
  word-wrap: break-word;
  overflow-wrap: break-word;
}


@mixin truncate-text() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}


@mixin hide-text() {
  overflow: hidden;
  text-indent: 201%;
  white-space: nowrap;
}


@mixin text-stroke($thickness, $color) {
  text-shadow: -#{$thickness} -#{$thickness} 0 $color,
  -#{$thickness} 0 0 $color,
  -#{$thickness} #{$thickness} 0 $color,
  0 -#{$thickness} 0 $color,
  0 0 0 $color,
  0 #{$thickness} 0 $color,
  #{$thickness} -#{$thickness} 0 $color,
  #{$thickness} 0 0 $color,
  #{$thickness} #{$thickness} 0 $color;
}


@mixin bg-cover() {
  background-size: cover;
  background-position: center;
}


@mixin bg-decor() {
  background-size: 100% 100%;
  background-position: 0 0;
  background-repeat: no-repeat;
}


@mixin bg-contain() {
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
}


@mixin img-responsive() {
  display: block;
  max-width: 100%;
  height: auto;
}

@mixin img-full() {
  display: block;
  width: 100%;
  height: auto;
}

@mixin responsive-svg() {
  display: block;
  width: 100%;
  height: 100%;
}


@mixin full-pos($coord) {
  top: $coord;
  right: $coord;
  bottom: $coord;
  left: $coord;
}


@mixin full-abs($coord) {
  @include full-pos($coord);
  position: absolute;
}


@mixin full-fix($coord) {
  @include full-pos($coord);
  position: fixed;
}


@mixin fill-abs() {
  position: absolute;
  top: 0;
  left: 0;
  display: block;
  width: 100%;
  height: 100%;
}


@mixin placeholder() {
  ::-webkit-input-placeholder {@content} //use inside input-container element as
  ::-ms-input-placeholder {@content}     //@include placeholder {
  :-ms-input-placeholder {@content}      //  color: $faded-base;
  ::-moz-placeholder {@content}          //  font-weight: 300;
  :-moz-placeholder {@content}           //  opacity: 1;
  ::placeholder {@content}               //}
}

@mixin visually-hidden() {
  position: absolute;
  left: -9999px;
  z-index: -1;
  width: 1px;
  height: 1px;
  overflow: hidden;
  opacity: 0;
  -webkit-appearance: none;
}

@mixin hidden-input() {
  @include visually-hidden();
}


@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}


@mixin center-flex() {
  display: flex;
  align-items: center;
  justify-content: center;
}


@mixin center-abs($axis: both) {
  @if $axis == both {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  @else if $axis == w {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  }
  @else if $axis == h {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
  }
}


// @include spinner(20px, 2px, $white-true);
@mixin spinner($size, $width, $color) {
  @include round($size);
  content: '';
  display: block;
  position: absolute;
  pointer-events: none;
  animation: spin .7s linear infinite;
  top: 50%;
  left: 50%;
  margin: (-($size / 2)) 0 0 (-($size / 2));
  border: $width solid transparent;
  border-bottom-color: $color;
  border-left-color: $color;
  z-index: 1;
}


//  @include arrow($border-base, 1px, 4px, down);
@mixin arrow($color, $thickness, $size, $direction) { // $direction: up, right, down, left
  $rotation: -135;

  @if $direction == right {
    $rotation: -45;
  } @else if $direction == down {
    $rotation: 45;
  } @else if $direction == left {
    $rotation: 135;
  }

  border: solid $color;
  border-width: 0 $thickness $thickness 0;
  padding: $size;
  transform: rotate($rotation+deg);
}


@mixin triangle($size, $color, $direction) { // $direction: up, down, left, right, up-right, up-left, down-right, down-left
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height / 2);
    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;
    @if $direction == up-right {
      border-left: $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left: $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  }
}


// @include dashed-border(3px, 2px, 2px, $border-base, right);
@mixin dashed-border($dashlength, $spacelength, $borderwidth, $color, $position: top) {
  $direction: to right;

  @if ($position == top) or ($position == bottom) {
    background-size: ($dashlength/2 + $spacelength + $dashlength/2) $borderwidth;
    background-repeat: repeat-x;
  } @else {
    background-size: $borderwidth ($dashlength/2 + $spacelength + $dashlength/2);
    background-repeat: repeat-y;
    $direction: to bottom;
  }

  background-image: linear-gradient($direction, $color 0, $color $dashlength/2, rgba(0, 0, 0, 0) $dashlength/2, rgba(0, 0, 0, 0) $dashlength/2 + $spacelength, $color $dashlength/2 + $spacelength, $color $dashlength/2 + $spacelength + $dashlength/2);
  background-position: $position;
}


@mixin no-break-li() {
  break-inside: avoid;
  page-break-inside: avoid;
}


@mixin fix-flex-minh() {
  &::after {
    content: '';
    display: block;
    width: 0%;
    min-height: inherit;
  }
}
